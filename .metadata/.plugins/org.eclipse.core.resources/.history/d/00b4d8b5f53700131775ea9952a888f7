import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import javax.imageio.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.AWTEvent;
import java.awt.BorderLayout;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
//import javax.swing.JTextField;

public class GridBagLayoutDemo{
    final static boolean shouldFill = true;
    final static boolean shouldWeightX = true;
    final static boolean RIGHT_TO_LEFT = false;
    private int row,column,index=1;
    private String sel_obstacle,sel_field;
    private String ficheropath = "src/camino_salida.txt";
    private String linea;
    private int localbutton,obstacletype;
    //make dim dynamically
    private int dim = 5;
    public void setcolumn(int _column){
    	this.column = _column;
    }
    public int getcolumn(){
    	return this.column;
    }
    public void setrow(int _row){
    	this.row = _row;
    }
    public int getrow(){
    	return this.row;
    }
    public String getobstacle(){
    	return this.sel_obstacle;
    }
    public void setobstacle(String _obstacle){
    	this.sel_obstacle = _obstacle;
    }
  //todo: write algorithm for column/row to button-index conversion
    public String getobstaclefield(){
    	return this.sel_field;
    }
    //todo: write algorithm for column/row to button-index conversion
    public void setobstaclefield(String _sel_field){
    	this.sel_field = _sel_field;
    }
    public int matr2button(String _matr){
    	//r2,c4
    	int _row,_column;
    	System.out.println(_matr);
    	_row = Character.getNumericValue(_matr.charAt(1));
    	//System.out.println(_row);
    	_column = Character.getNumericValue(_matr.charAt(4));
    	//System.out.println(_column);
    	int buttonnum = (dim>1) ? (_row - 1) * dim + _column : _column; 
    	return buttonnum;
    }
    public String getficheropath(){
    	return this.ficheropath;
    }
    public void setficheropath(String _ficheropath){
    	this.ficheropath = _ficheropath;
    }
    
    public void setReadTextField(String _setText){
    	this.linea = _setText;
    }
    
    
    //todo: make number of buttons dynamically
    JButton myButton[]=new JButton[26];
    JTextField myWriteTextField = new JTextField();
	JTextField myReadTextField = new JTextField();
	ButtonGroup buttongroup = new ButtonGroup();	
    public void setfields(Container pane){
    	
    	GridBagConstraints c = new GridBagConstraints();

    	ActionListener myListener = new ActionListener(){
    		
    		public void actionPerformed(ActionEvent e){
    			boolean containtsnum;
    			String s = (String)e.getActionCommand();
    			
    			  
    			
    			
    			if(s.matches(".*\\d.*")){
    				setobstaclefield(e.getActionCommand());
         	    	ImageIcon image_cat = new ImageIcon("src/hierba_cat.png");
         	    	ImageIcon image_tree = new ImageIcon("src/hierba_tree.png");
         	    	localbutton = matr2button(getobstaclefield());
         	    	if(obstacletype == 1) {
         	    	
                 	myButton[localbutton].setIcon(image_tree);
         	    	}
         	    	else{ 
         	    	myButton[localbutton].setIcon(image_cat);
         	    	}
    			}
    			else if(s.equals("tree")){
    				obstacletype = 1;
    				
    			}
    		  	
    			if(s.equals("cat")){
    				obstacletype = 2;
    				
    			}
    		  	
    		}
    	};
    	
        
    	JRadioButton treeButton = new JRadioButton("Pone arból");
    	
    	//treeButton.setMnemonic(KeyEvent.VK_N);
    	treeButton.setActionCommand("tree");
    	treeButton.setSelected(false);
    	
    	JRadioButton catButton = new JRadioButton("Pone cat");
    	//catButton.setMnemonic(KeyEvent.VK_B);
    	catButton.setActionCommand("cat");
    	catButton.setSelected(false);
    	
    	ButtonGroup radiogroup = new ButtonGroup();
    	
    	radiogroup.add(treeButton);
    	radiogroup.add(catButton);
    	
    	
    	catButton.addActionListener(myListener);
    	treeButton.addActionListener(myListener);
    	
    	
  
    //todo: dynamically arrange list
    	c.weightx =0;
    	c.weighty =0;
    	c.gridx = 1;
    	c.gridy = 6;
    	c.fill = GridBagConstraints.VERTICAL;
    	pane.add(treeButton,c);
    
    	c.weighty =0;
    	c.weightx =0;
    	c.gridx = 1;
    	c.gridy = 7;
    	c.fill = GridBagConstraints.VERTICAL;
    	pane.add(catButton,c);

    	index = 1;
    
    	try{
    		//todo: make rows and columns dynamically
        	for(setrow(1);getrow()<=5;setrow(getrow()+1)){
            	for(setcolumn(1);getcolumn()<=5;setcolumn(getcolumn()+1)){
            
            		BufferedImage buttonIcon = ImageIO.read(new File("src/hierba_small.png"));
            		ImageIcon hierba = new ImageIcon("src/hierba_small.png");
            		
            		
            		myButton[index] = new JButton(new ImageIcon(buttonIcon));
            		
            		myButton[index].setActionCommand("r" + getrow() + ",c" + getcolumn());
            		
                	myButton[index].setBorder(BorderFactory.createEmptyBorder());
                	myButton[index].setContentAreaFilled(false);
            	
                	myButton[index].addActionListener(myListener);
                
                	
                	    
            	c.fill = GridBagConstraints.HORIZONTAL;
            	
    
            	c.gridx = getcolumn();
            	c.gridy = getrow();
            	
            	pane.add(myButton[index], c);
            	
            	index++;
            	}
            
            	
        	}
        	
            
    	} catch (IOException e){
    		System.out.println("false_setfields");
    	}
    }
   
    

	
    public void settextfield(Container pane){
     	GridBagConstraints c = new GridBagConstraints();

        JButton myReadButton = new JButton("Read text!");
        myReadButton.setActionCommand("Read");
        JButton myWriteButton = new JButton("Write text!");
        myWriteButton.setActionCommand("Write");
        
        ActionListener myListener = new ActionListener(){
        
    		public void actionPerformed(ActionEvent e){
    			String s = (String)e.getActionCommand();
    			if(s.equals("Read")){
    				myReadTextField.setText(getficherotext());
    			}
    			if(s.equals("Write")){
    				myWriteTextField.setText(myReadTextField.getText());
    			}
    		}
    		
    	};
        //todo: make dynamically
    	c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 30;
        c.weightx = 0.0;
        c.gridwidth = 2;
        c.gridx = 1;
        c.gridy = 8;
        myReadTextField.setText("Read");
        pane.add(myReadTextField,c);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 30;
        c.weightx = 0.0;
        c.gridwidth = 2;
        c.gridx = 1;
        c.gridy = 9;
        myWriteTextField.setText("Write");
        pane.add(myWriteTextField,c);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 0;
        c.weightx = 1.0;
        c.anchor = GridBagConstraints.PAGE_END;
        c.insets = new Insets(10,0,0,0);
        c.gridwidth = 2;
        c.gridx = 1;
        c.gridy = 10;
        pane.add(myReadButton,c);
        myReadButton.addActionListener(myListener);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 0;
        c.weightx = 1.0;
        c.anchor = GridBagConstraints.PAGE_END;
        c.insets = new Insets(10,0,0,0);
        c.gridwidth = 2;
        c.gridx = 3;
        c.gridy = 10;
        pane.add(myWriteButton,c);
        myWriteButton.addActionListener(myListener);
        
    }
    
    public static void addComponentsToPane(Container pane) {
        if (RIGHT_TO_LEFT) {
            pane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        }
 
        
    pane.setLayout(new GridBagLayout());
 	GridBagConstraints c = new GridBagConstraints();
    if (shouldFill) {
    //natural height, maximum width
    c.fill = GridBagConstraints.HORIZONTAL;
    }
    GridBagLayoutDemo panel = new GridBagLayoutDemo();
    panel.setfields(pane);
    panel.settextfield(pane);
    	
    }
    public String getficherotext(){
  	  File nombre = null;
  	  String dir = "src/camino_salida.txt";
  	  FileReader filepointer = null;
  	  BufferedReader bufferedpointer = null;
  	  
  	  try{
  		  //initialize la lectura
  		  nombre = new File (dir);
  		  
  		  //fileReader no tiene métodos que permitan leer líneas completas
  		  //pero sí BufferedReader
  		  filepointer = new FileReader (nombre);
  		  bufferedpointer = new BufferedReader(filepointer);
  		  
  		  //leer el fichero
  		  
  		  while((linea=bufferedpointer.readLine())!=null){
  			System.out.println(linea);
  		  return linea;
  		  }
  		  return "no puedo leer";
  	  }
  	  catch(Exception e){
  		  e.printStackTrace();
  		  return "excepción de catch";
  	  }finally{
  		  // cerrar el fichero si todo va bien
  		  try{
  			  if(null != filepointer) {
  				  filepointer.close();
  			  }//--end close filepointer
  		  }catch (Exception e2){
  			  e2.printStackTrace();
  		  }//--end catch finally
  	  }
  	 
    }

    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("GridBagLayoutDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        //Set up the content pane.
        addComponentsToPane(frame.getContentPane());
 
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
 
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}

